// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum stat {
  ONLINE
  OFFLINE
  IN_GAME
  BUSY
}

//num achievements {
// First_Win //"Awarded to players who win their first game of Pong on our website."
// Pong_Pro //"Awarded to players who win 10 games of Pong on on our website."
// Perfect_Game //"Awarded to players who win a game of Pong without their opponent scoring a single point"
// Streak_Master //"Awarded to players who win 5 consecutive games of Pong on our website"
// Social_Butterfly //"Awarded to players who chat with 5 different player on our website."
//

model User {
  id              Int      @id @default(autoincrement())
  username        String   @unique
  pass            String
  email           String   @unique
  fullName        String
  pictureUrl      String
  createdAt       DateTime @default(now())
  achievements    String[]
  friends         Int[]
  blockedUsers    Int[]
  point           Int
  two_factor_auth Boolean  @default(false)
  stat            stat     @default(OFFLINE)
  played          Int      @default(0)
  won             Int      @default(0)
  lost            Int      @default(0)
  row             Int      @default(0)
  coalition       String

  @@map("users")
}

model SessionToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  loginIp   String
  token     String   @unique
  loginTime DateTime @default(now())

  @@map("sessionTokens")
}

model Game {
  id            Int     @id @default(autoincrement())
  leftPlayerId  Int
  rightPlayerId Int
  map           Int
  round         Int
  gameId        String
  private       Boolean
  hash          String  @unique
  status        Int
  userIds       Int[]
  userCount     Int

  @@map("games")
}

model Validate {
  id           Int      @id @default(autoincrement())
  userId       Int
  validcode    Int
  email        String
  expired_date DateTime @default(now())

  @@map("validations")
}

model GameHistory {
  id               Int      @id @default(autoincrement())
  leftPlayerId     Int
  rightPlayerId    Int
  leftPlayerScore  Int
  rightPlayerScore Int
  gameTime         DateTime @default(now())

  @@map("gameHistorys")
}

model messages {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  message    String
  time       DateTime @default(now())
}

model userMute {
  id         Int       @id @default(autoincrement())
  userId     Int
  mutedTime  DateTime  @default(now())
  channels   channels? @relation(fields: [channelsId], references: [id])
  channelsId Int?
}

model channels {
  id          Int        @id @default(autoincrement())
  channelName String     @unique()
  ownerId     Int
  userIds     Int[]
  adminIds    Int[]
  mutedUsers  userMute[]
  BannedUsers Int[]
  public      Boolean    @default(false)
  password    String     @default("")
}

model channelMessages {
  id        Int      @id @default(autoincrement())
  channelId Int
  senderId  Int
  message   String
  time      DateTime @default(now())
}
